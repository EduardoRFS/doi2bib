name: Cross Compile

on: [push, pull_request]

jobs:
  cross_compile:
    name: Musl cross compilation build

    strategy:
      fail-fast: false
      matrix:
        ocaml-version: ["~4.10.1000"]
        operating-system: [ubuntu-latest]
        arch: [x86_64, arm64]

    runs-on: ${{ matrix.operating-system }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create esy wrapper
        run: |
          echo '{
            "name": "cross-compile",
            "dependencies": {
              "ocaml": "${{ matrix.ocaml-version }}",
              "doi2bib": "./doi2bib.opam",
              "generate": "github:EduardoRFS/reason-mobile:generate.json#aa8bf14a810051b367d9c5fd90c1dc31b6390ff8"
            },
            "resolutions": {
              "@opam/mtime": "github:dune-universe/mtime:mtime.opam#9584b66cecc891208b31cec4628dd412b8cffe75",
              "@opam/zarith": "github:dune-universe/Zarith:zarith.opam#c62b045106fafa407874053bdd79273a8f591352",
              "@opam/num": "github:dune-universe/num:num.opam#bdb2d7653e927e142b701b51d89f393471279713",
              "@opam/cstruct-sexp": "5.2.0",
              "esy-gmp": "EduardoRFS/esy-gmp:package.json#c7112b03da47a5ed5fa4b77a97a11210387f42e3"
            }
          }' > esy.json

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install esy
        run: npm install -g esy

      - name: Create cross compile toolchain lock
        run: esy solve

      - uses: esy/github-action@v1
        with:
          cache-key: bump-${{ matrix.arch }}-${{ hashFiles('esy.lock/index.json') }}

      - name: Create wrapper
        run: esy generate linux.musl.${{ matrix.arch }}

      - name: Install dependencies
        run: esy @linux.musl.${{ matrix.arch }} install

      - name: Build
        run: esy @linux.musl.${{ matrix.arch }} build

      - name: Create release archive
        if: ${{ success() }}
        run: esy @linux.musl.${{ matrix.arch }} -p @_linux.musl.${{ matrix.arch }}/doi2bib sh -c 'tar czf release.tar.gz -C $cur__target_dir/_build/default.linux.musl.${{ matrix.arch }}/bin doi2bib.exe'
      
      - name: Upload build artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          path: release.tar.gz
          name: doi2bib-${{ env.GITHUB_TAG }}-${{ matrix.arch }}-unknown-linux-musl.tar.gz
          if-no-files-found: error

      - name: Upload release tarball
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft_release.outputs.upload_url }}
          asset_path: release.tar.gz
          asset_name: doi2bib-${{ env.GITHUB_TAG }}-${{ matrix.arch }}-unknown-linux-musl.tar.gz
          asset_content_type: application/zip
